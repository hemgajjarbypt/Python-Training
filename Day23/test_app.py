import pytest
from fastapi.testclient import TestClient
from fastapi import HTTPException
from unittest.mock import patch, MagicMock

from app import app, verify_api_key, API_KEY, qa_pipeline

client = TestClient(app)

def test_app_title():
    """Test FastAPI app title."""
    assert app.title == "LLM Question Answering API"



@patch('app.qa_pipeline')
def test_ask_question_valid(mock_pipeline):
    """Test /qa endpoint with valid request."""
    mock_response = [{"generated_text": "This is a mock answer generated by the model."}]
    mock_pipeline.return_value = mock_response

    response = client.post(
        "/qa",
        json={"question": "What is artificial intelligence?"},
        headers={"X-API-Key": API_KEY}
    )
    assert response.status_code == 200
    data = response.json()
    assert data["question"] == "What is artificial intelligence?"
    assert data["answer"] == "This is a mock answer generated by the model."
    mock_pipeline.assert_called_once_with("What is artificial intelligence?", max_new_tokens=100)

@patch('app.qa_pipeline')
def test_ask_question_empty_question(mock_pipeline):
    """Test /qa endpoint with empty question."""
    response = client.post(
        "/qa",
        json={"question": ""},
        headers={"X-API-Key": API_KEY}
    )
    assert response.status_code == 400
    assert response.json()["detail"] == "Question cannot be empty"

@patch('app.qa_pipeline')
def test_ask_question_invalid_api_key(mock_pipeline):
    """Test /qa endpoint with invalid API key."""
    response = client.post(
        "/qa",
        json={"question": "What is AI?"},
        headers={"X-API-Key": "invalid_key"}
    )
    assert response.status_code == 401
    assert response.json()["detail"] == "Invalid or missing API Key"

@patch('app.qa_pipeline')
def test_ask_question_missing_api_key(mock_pipeline):
    """Test /qa endpoint with missing API key."""
    response = client.post(
        "/qa",
        json={"question": "What is AI?"}
    )
    assert response.status_code == 401
    assert response.json()["detail"] == "Invalid or missing API Key"

@patch('app.qa_pipeline')
def test_ask_question_pipeline_exception(mock_pipeline):
    """Test /qa endpoint when pipeline raises an exception."""
    mock_pipeline.side_effect = Exception("Mock pipeline error")

    response = client.post(
        "/qa",
        json={"question": "What is AI?"},
        headers={"X-API-Key": API_KEY}
    )
    assert response.status_code == 500
    assert "Mock pipeline error" in response.json()["detail"]
